''' 
Initial code generated by ChatGPT model GPT-4o
(https://chatgpt.com/share/683083e5-6898-8010-9b0e-be936819f6ac)
The generated code and is heavily modified by the author to fit the needs of the project.
'''

from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
from backend.main import graph, suggest_similar_questions
import re

app = FastAPI()

# Set up static files.
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

class Query(BaseModel):
    question: str

# Serve the HTML file.
@app.get("/", response_class=HTMLResponse)
async def serve_index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# API endpoint to handle the user query.
@app.post("/ask")
async def ask_query(query: Query):
    # Log the query for debugging
    print(f"Received question: {query.question}")

    # Final safeguard check for empty queries.
    if not query.question.strip():
        return {"error": "Query cannot be empty."}
    
    # Final safeguard for long queries via E.G., Curl or Postman.
    if len(query.question) > 150:
        return {"error": "Query is too long. Please limit to 150 characters."}

    # Initiate the RAG process from main.py with the user query.
    response = graph.invoke(
        {"question": query.question})

    # Remove potential bold markers from the generated answer.
    cleaned_answer = re.sub(r"\*\*", r"", response["answer"])
    
    # Include page numbers in the response context.
    '''
    This is used for debugging purposes to show which chunk ID's were sent as context.
    It is also part of the unimplemented feature where the web-app links to the specific pages used in the answer.

    '''
    context_with_ids = [{"id": doc["id"]} for doc in response.get("context", [])]
    
    # Return the cleaned answer and context with IDs.
    return {
        "answer": cleaned_answer,
        "context": context_with_ids
    }

@app.post("/suggestions")
async def get_suggestions(query: Query):
    suggestions = suggest_similar_questions(query.question)
    return {"suggestions": suggestions}

'''
This code snippet serves the PDF file. It is a part of an unimplemented feature where the web-app links to the specific pages used in the answer.
@app.get("/pdf")
async def serve_pdf():
    pdf_path = "chunker/euactNB.pdf"  # Relative path to the PDF file
    return FileResponse(pdf_path, media_type="application/pdf")
'''